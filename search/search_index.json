{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Usage","text":"pystru     Provide a quick way to set up the structure of a Python project."},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pystru\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#create-a-tiny-python-project","title":"Create a tiny python project","text":"<pre><code>pystru create --type tiny --name test --demo True\n</code></pre>"},{"location":"#create-a-basic-python-project","title":"Create a basic python project","text":"<pre><code>pystru create --type basic --name test --demo True\n</code></pre>"},{"location":"cli/","title":"CLI","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>Which kinds of project structure you want to create.</p> required <code>name</code> <code>str</code> <p>The name for your python project.</p> required <code>demo</code> <code>bool</code> <p>Create a demo python project.</p> required Source code in <code>pystru/cli.py</code> <pre><code>@cli.command(name='create', help='Create a python project.')\n@click.option('--type', default='basic', help='Which kinds of project structure you want to create.')\n@click.option('--name', default='myPythonProject', help='The name for your python project.')\n@click.option('--demo', default=False, help='Create a demo python project.')\ndef create_project(type: str, name: str, demo: bool):\n\"\"\"\n    Parameters\n    ----------\n    type : str\n        Which kinds of project structure you want to create.\n    name : str\n        The name for your python project.\n    demo : bool\n        Create a demo python project.\n    \"\"\"\n    meta_data.update({\"repo_name\": name})\n\n    if type == 'tiny':\n        s = structure.tiny\n\n    elif type == 'basic':\n        s = structure.basic\n\n    cf = CreateFoldersAndFiles(templates_dir=templates_dir, meta_data=meta_data, **s)\n    cf.create()\n\n    if demo:\n        create_demo()\n</code></pre>"},{"location":"temp/","title":"templates","text":"<p>summary</p> Source code in <code>pystru/temp.py</code> <pre><code>class CreateFoldersAndFiles:\n    def __init__(self, templates_dir: str, meta_data: dict, **kwargs):\n\"\"\"_summary_\n\n        Parameters\n        ----------\n        templates_dir : str\n            The folder where the template file is located.\n        meta_data : dict\n            The meta data for the template file.\n        **kwargs : dict\n            The structure data for the project.\n        \"\"\"\n        self.templates_dir = templates_dir\n        self.files_dir = os.path.join(templates_dir, \"files\")\n        self.meta_data = meta_data\n        self.kwargs = kwargs\n\n    def create(self):\n        self.__create_folders()\n        self.__create_files_from_jinja2()\n        self.__copy_files()\n\n    def __create_folders(self):\n        for folder in self.kwargs['folders']:\n            os.makedirs(name=folder, exist_ok=True)\n\n    def __create_files_from_jinja2(self):\n        for _, file in self.kwargs['jinja2'].items():\n            template = set_environment(folder=self.templates_dir, template=file)\n            with open(file, \"w\", encoding=\"utf-8\") as f:\n                f.write(template.render(**self.meta_data))\n\n    def __copy_files(self):\n        for _, (dir, file_name) in self.kwargs['files'].items():\n            if dir != \".\":\n                dst = os.path.join(dir, file_name)\n            else:\n                dst = file_name\n\n            shutil.copyfile(dst=dst, src=os.path.join(self.files_dir, dst))\n</code></pre> Source code in <code>pystru/temp.py</code> <pre><code>class Structure:\n    def __init__(self, file_path: str):\n\"\"\"_summary_\n\n        Parameters\n        ----------\n        file_path : str\n            The path of the structure file.\n        \"\"\"\n        self.file_path = file_path\n\n    @property\n    def structure_data(self) -&gt; dict:\n\"\"\"_summary_\n\n        Returns\n        -------\n        dict\n            The structure data.\n        \"\"\"\n        import toml\n        return toml.load(self.file_path)\n\n    @staticmethod\n    def inherit_data(parent: dict={}, child: dict={}):\n        child.update(parent)\n        return child\n\n    @property\n    def tiny(self):\n        return {\n            \"jinja2\": self.structure_data[\"tiny\"][\"jinja2\"],\n            \"files\": self.structure_data[\"tiny\"][\"files\"],\n            \"folders\": self.structure_data[\"tiny\"][\"folders\"],\n        }\n\n    @property\n    def basic(self):\n        basic_jinj2 = Structure.inherit_data(\n            parent=self.structure_data[\"tiny\"][\"jinja2\"], \n            child=self.structure_data[\"basic\"][\"jinja2\"]\n        )\n        basic_files = Structure.inherit_data(\n            parent=self.structure_data[\"tiny\"][\"files\"], \n            child=self.structure_data[\"basic\"][\"files\"]\n        )\n        basic_folders = Structure.inherit_data(\n            parent=self.structure_data[\"tiny\"][\"folders\"], \n        )\n\n        return {\n            \"jinja2\": basic_jinj2,\n            \"files\": basic_files,\n            \"folders\": basic_folders,\n        }\n</code></pre>"},{"location":"temp/#pystru.temp.set_environment--set_environment","title":"set_environment","text":"<p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>The folder where the template file is located.</p> required <code>template</code> <code>str</code> <p>The template file name.</p> required <p>Returns:</p> Type Description <code>jimja2.Template</code> <p>Return a jinja2 template.</p> Source code in <code>pystru/temp.py</code> <pre><code>def set_environment(folder: str, template:str):\n\"\"\"_summary_\n    # set_environment\n    Parameters\n    ----------\n    folder : str\n        The folder where the template file is located.\n    template : str\n        The template file name.\n\n    Returns\n    -------\n    jimja2.Template\n        Return a jinja2 template.\n    \"\"\"\n    env = Environment(loader=FileSystemLoader(folder))\n    template = env.get_template(template)\n    return template\n</code></pre>"},{"location":"temp/#pystru.temp.CreateFoldersAndFiles.__init__","title":"<code>__init__(templates_dir, meta_data, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>templates_dir</code> <code>str</code> <p>The folder where the template file is located.</p> required <code>meta_data</code> <code>dict</code> <p>The meta data for the template file.</p> required <code>**kwargs</code> <code>dict</code> <p>The structure data for the project.</p> <code>{}</code> Source code in <code>pystru/temp.py</code> <pre><code>def __init__(self, templates_dir: str, meta_data: dict, **kwargs):\n\"\"\"_summary_\n\n    Parameters\n    ----------\n    templates_dir : str\n        The folder where the template file is located.\n    meta_data : dict\n        The meta data for the template file.\n    **kwargs : dict\n        The structure data for the project.\n    \"\"\"\n    self.templates_dir = templates_dir\n    self.files_dir = os.path.join(templates_dir, \"files\")\n    self.meta_data = meta_data\n    self.kwargs = kwargs\n</code></pre>"},{"location":"temp/#pystru.temp.Structure.structure_data","title":"<code>structure_data: dict</code>  <code>property</code>","text":"<p>summary</p> <p>Returns:</p> Type Description <code>dict</code> <p>The structure data.</p>"},{"location":"temp/#pystru.temp.Structure.__init__","title":"<code>__init__(file_path)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path of the structure file.</p> required Source code in <code>pystru/temp.py</code> <pre><code>def __init__(self, file_path: str):\n\"\"\"_summary_\n\n    Parameters\n    ----------\n    file_path : str\n        The path of the structure file.\n    \"\"\"\n    self.file_path = file_path\n</code></pre>"}]}